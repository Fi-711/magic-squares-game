import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertArrayEquals;

/**
 * Parameterized tests on magic square checking grids made correctly for various sizes
 */
@RunWith(Parameterized.class)
public class MagicSquareTestParameterized {
    private int gridSize;
    private int[][] expected;

    public MagicSquareTestParameterized(int gridSize, int[][] expected) {
        this.gridSize = gridSize;
        this.expected = expected;
    }

    // Arrange
    @Parameterized.Parameters
    public static Collection<Object[]> testConditions() {
        return Arrays.asList(new Object[][]{
                {1, new int[][]{{1}}},
                {3, new int[][]{
                        {6, 1, 8},
                        {7, 5, 3},
                        {2, 9, 4}}},
                {7, new int[][]{
                        {28, 19, 10, 1, 48, 39, 30},
                        {29, 27, 18, 9, 7, 47, 38},
                        {37, 35, 26, 17, 8, 6, 46},
                        {45, 36, 34, 25, 16, 14, 5},
                        {4, 44, 42, 33, 24, 15, 13},
                        {12, 3, 43, 41, 32, 23, 21},
                        {20, 11, 2, 49, 40, 31, 22}}},
                {11, new int[][]{
                        {66, 53, 40, 27, 14, 1, 120, 107, 94, 81, 68},
                        {67, 65, 52, 39, 26, 13, 11, 119, 106, 93, 80},
                        {79, 77, 64, 51, 38, 25, 12, 10, 118, 105, 92},
                        {91, 78, 76, 63, 50, 37, 24, 22, 9, 117, 104},
                        {103, 90, 88, 75, 62, 49, 36, 23, 21, 8, 116},
                        {115, 102, 89, 87, 74, 61, 48, 35, 33, 20, 7},
                        {6, 114, 101, 99, 86, 73, 60, 47, 34, 32, 19},
                        {18, 5, 113, 100, 98, 85, 72, 59, 46, 44, 31},
                        {30, 17, 4, 112, 110, 97, 84, 71, 58, 45, 43},
                        {42, 29, 16, 3, 111, 109, 96, 83, 70, 57, 55},
                        {54, 41, 28, 15, 2, 121, 108, 95, 82, 69, 56}}},
                {21, new int[][]{
                        {231, 208, 185, 162, 139, 116, 93, 70, 47, 24, 1, 440, 417, 394, 371, 348, 325, 302, 279, 256, 233},
                        {232, 230, 207, 184, 161, 138, 115, 92, 69, 46, 23, 21, 439, 416, 393, 370, 347, 324, 301, 278, 255},
                        {254, 252, 229, 206, 183, 160, 137, 114, 91, 68, 45, 22, 20, 438, 415, 392, 369, 346, 323, 300, 277},
                        {276, 253, 251, 228, 205, 182, 159, 136, 113, 90, 67, 44, 42, 19, 437, 414, 391, 368, 345, 322, 299},
                        {298, 275, 273, 250, 227, 204, 181, 158, 135, 112, 89, 66, 43, 41, 18, 436, 413, 390, 367, 344, 321},
                        {320, 297, 274, 272, 249, 226, 203, 180, 157, 134, 111, 88, 65, 63, 40, 17, 435, 412, 389, 366, 343},
                        {342, 319, 296, 294, 271, 248, 225, 202, 179, 156, 133, 110, 87, 64, 62, 39, 16, 434, 411, 388, 365},
                        {364, 341, 318, 295, 293, 270, 247, 224, 201, 178, 155, 132, 109, 86, 84, 61, 38, 15, 433, 410, 387},
                        {386, 363, 340, 317, 315, 292, 269, 246, 223, 200, 177, 154, 131, 108, 85, 83, 60, 37, 14, 432, 409},
                        {408, 385, 362, 339, 316, 314, 291, 268, 245, 222, 199, 176, 153, 130, 107, 105, 82, 59, 36, 13, 431},
                        {430, 407, 384, 361, 338, 336, 313, 290, 267, 244, 221, 198, 175, 152, 129, 106, 104, 81, 58, 35, 12},
                        {11, 429, 406, 383, 360, 337, 335, 312, 289, 266, 243, 220, 197, 174, 151, 128, 126, 103, 80, 57, 34},
                        {33, 10, 428, 405, 382, 359, 357, 334, 311, 288, 265, 242, 219, 196, 173, 150, 127, 125, 102, 79, 56},
                        {55, 32, 9, 427, 404, 381, 358, 356, 333, 310, 287, 264, 241, 218, 195, 172, 149, 147, 124, 101, 78},
                        {77, 54, 31, 8, 426, 403, 380, 378, 355, 332, 309, 286, 263, 240, 217, 194, 171, 148, 146, 123, 100},
                        {99, 76, 53, 30, 7, 425, 402, 379, 377, 354, 331, 308, 285, 262, 239, 216, 193, 170, 168, 145, 122},
                        {121, 98, 75, 52, 29, 6, 424, 401, 399, 376, 353, 330, 307, 284, 261, 238, 215, 192, 169, 167, 144},
                        {143, 120, 97, 74, 51, 28, 5, 423, 400, 398, 375, 352, 329, 306, 283, 260, 237, 214, 191, 189, 166},
                        {165, 142, 119, 96, 73, 50, 27, 4, 422, 420, 397, 374, 351, 328, 305, 282, 259, 236, 213, 190, 188},
                        {187, 164, 141, 118, 95, 72, 49, 26, 3, 421, 419, 396, 373, 350, 327, 304, 281, 258, 235, 212, 210},
                        {209, 186, 163, 140, 117, 94, 71, 48, 25, 2, 441, 418, 395, 372, 349, 326, 303, 280, 257, 234, 211}
                }}
        });
    }

    @Test
    public void magicSquareGrids() {
        // Act
        MagicSquare magicSquare = new MagicSquare(gridSize);
        int[][] actual = magicSquare.getGrid();

        //Assert
        assertArrayEquals(expected, actual);
    }
}

/*
 University ID Number: c1948118
 Name: Suhail Ahmed
 */
